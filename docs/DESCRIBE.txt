
There are two major components associated with this system, the Dynace
Object Oriented Extension to C (Dynace) and the Dynace Windows Development
System (WDS).  Dynace will be described first and WDS will be subsequently
described.


Dynace
------
Dynace is a preprocessor, include files and a library which extends the
C or C++ languages with advanced object oriented capabilities, automatic
garbage collection and multiple threads.  Dynace is designed to solve
many of the problems associated with C++ while being easier to learn and
containing more flexible object oriented facilities.  Dynace is able to
add facilities previously only available in languages such as Smalltalk
and CLOS without all the overhead normally associated with those
environments.

Dynace comes with full C source and is portable Linux, macos, all
versions of Windows, as well as 16 bit DOS, BSD, and many other unix,
and VMS.  Dynace can link with pre-existing C/C++ libraries and can be
easily added to pre-existing C/C++ code in order to incrementally add
Dynace's features.

The benefits of Dynace are 1) it is much easier to manage large projects
with then C++, 2) it offers much more powerful OO facilities (such as
metaclass based from the ground up, garbage collection, etc) then C++,
3) it adds little to the C syntax and is therefore easier to learn then C++.

Dynace is totally independent of WDS.  What this means is that Dynace is
built independently of WDS and then WDS is built on top of it.  Dynace
can be used without WDS.


--------

The Dynace language is very portable and includes:

* the kernel (provided the OO features and other langage-level facilities)
* DPP (the Dynace pre-processor)
* class library (collection of generic Dynace classes)

The Dynace language stands on its own and is documented in the file named
manual/Dynace.pdf. 

Regardless, the Dynace language is portable and works fine on 64 bit machines.

CONCERNS

There are two areas I'd look out for whan porting the Dynace langage as 
follows:

A. Threads
B. Garbage collector

Dynace has two threading models it supports:

I. Green threads
II. Native threads

Green threads is where a single CPU or process thread is used.  Dynace time
slices that single thread.

Native threads is where real OS threads are used across multiple threads.

Both are complete and tested but not extensively.  Neither
has been used in a production environment.  So, I am not 100%
confident about them.

In terms of the garbage collector, Dynace has been designed to support two 
models:

1. Dynace comes with a mark & sweep collector.  It is designed not to take
a lot of stack space regardless of the structure it is marking.  It also
handles recurrent data structires just fine.

2. The second model utilizes the Boehm-Demers-Weiser GC.

Both are complete and have been tested but not extensively.  Neither
has been used in production.  I would feel more comfortable with the
one that comes with Dynace.

There is a major portability concern with the Dynace GC.  In order to mark
all areas, Dynace must have access to the registers and the global roots.
There is no portable way to do this in C.  Dynace includes inline assembler
for some of the major platforms for this.  On the other hand, I presume the
Boehm-Demers-Weiser GC already handles this.

I have some concerns with the interaction of native threads and the GC.

