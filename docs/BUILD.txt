
Please note that Dynace comes with extensive documentation.  Once you
have the system built (following instructions in this file), see:

	manual/Dynace.pdf - 300+ pages of documentation on the language

The system also comes with a language tutorial.  See:

	examples/exam01/readme

Dynace operates equally well on Linux, BSD, Mac, Windows, and a
variety of other systems.

----------------------------------------


Build instructions:

There are five sections labeled:

    Windows
    Linux, Apple Mac, FreeBSD, Solaris, and Cygwin under Windows
    Plan 9
    Minix
    ARM

The DOS port should still work but is no longer tested.

The system runs fine under 32 and 64 bit Linux as well as 64 bit Mac.
It should run fine with possible minor tweaks to the makefiles.

Assuming DR is your Dynace root directory such as  c:\dynace or ~/Dynace

Go to the appropriate section.


================================================================================

Windows
-------

If you are operating With Cygwin under Windows, use the Linux build
docs below rather than this section.

This procedure will work for 32 and 64 bit builds.

Dynace is built from the command line using the included DMAKE
program.  DMAKE is just an enhanced nmake or make program.

First, make sure that your command line compiler is set up correctly.
You can do this by using the "Visual Studio Command Prompt" that comes
with Visual Studio and is located under "Visual Studio Tools".  I
suggest that you create a "Hello, World" program and compile and link
it from the command line to be sure it's all set up correctly.

All of the following commands should be executed in the root of the
Dynace tree.  For example, you should see sub-directories named
kernel, class, dpp, and generics at this level.

1.  Setup the build environment by executing the following file:

	setupenv.bat

2.  If your login ID has a period in it, you need to set the TMP
environment variable explicitly as follows:

        set TMP=C:\TEMP
	
or any other suitable location.  If you need to do this, you may want
to update setupenv.bat to reflect this change.

3.  Build the system

	nmake -f makefile.msc all-scratch

The system is now built.

The system has two major parts; the language, and the windows
development system.  At this point the language portion of the system
is built in the portable mode.  You can test it by going into
examples\exam03, building and running the example using the following
commands:

	cd examples\exam03
	nmake -f microsoft.msc
	main


================================================================================

Linux, Apple Mac, FreeBSD, Haiku, Solaris, and Cygwin under Windows
-------------------------------------------------------------------

1.  Build the system as follows:

	make

	(use the following under Cygwin instead)
		make CYGWIN=1

At this point the language portion of the system is built in the
portable mode.  You can test it by going into examples/exam03,
building and running the example using the following commands:

	cd examples/exam03
	make
	./main

--------------------

Language Tutorial

After you have everything built and setup you may want to go to
examples/exam01 through examples/exam38 (in order) and see the readme
file for the Dynace language examples and tutorial.


The complete manuals in PDF format are in the "manual" directory.
See manual/Dynace.pdf

--------------------

Documentation

The complete manuals in PDF format are in the "manual" directory.

See the section above labeled Language Tutorial

================================================================================

Plan 9
-----

Just go into the main directory and type:

	mk

This will build the entire system.  You can check it by typing:

	cd examples/exam03
	mk
	main


The complete manuals in PDF format are in the "manual" directory.

See the section above labeled Language Tutorial



================================================================================

Minix

This was done on Minix 3.2.1

To build under Minix you should follow the same instructions listed
under the section labeled Linux, Apple Mac, etc. except for what
follows in this section.

gmake is required.  Use gmake in all places where make is shown.

The system works with GCC or CLANG.  The system is setup to build
with gcc by default.  You must change makefile.inc (not makefile)
at the top level to switch from gcc to cc.  So, to change from gcc
to clang, change makefile.inc from:

    CC = gcc

to:

    CC = cc


Lastly, all of the makefiles for the example programs (under the
examples directory) use gcc by default.  You would have to change
each one as you use them (from gcc to cc) if you want to use clang.


================================================================================

ARM

The system has been enhanced to cross-compile from a Linux host to an
ARM target.  The ARM processor targeted is the 32 bit ARM with
software float.  Other cross-compile targets should be easy if you
follow the single commit that shows what was changed to make this
cross-compile work.

Build instructions

Basically it has to be built twice.  The first time builds the
necessary host programs.  The second time builds the target libraries.
It is expected that all builds will be done on the host but run on the
target machine.

	make realclean
	make
	make ARM32SF=1 realclean
	make ARM32SF=1

Building the examples.  Use:

	 make TCC=arm-linux-gnueabi-gcc
	 
================================================================================

Dynace supports native threads under Windows, and Posix/Linux/Mac
using pthreads - as an alternative to the Dynace supplied cooperative
threading system.  Dynace's supplied cooperative threading system only
uses a single OS thread - a single CPU.  Native threads allows your
system to take advantage of the multiple CPU's.

To build with native thread support, add "NATIVE_THREADS=1" to the make lines.
For example:

	make NATIVE_THREADS=1
	
What this does is make the Dynace kernel and classes thread safe.  Once this
is done, you would use the environment-supplied method of creating and using
threads.  In other words, don't use Dynace's cooperative threads to create and
manage threads.  Use the native mechanisms.  Dynace will be native thread safe.

================================================================================

Valid Targets
--------------------------------------
all			builds changes
all-scratch		builds everything from scratch
clean			removes intermediate and garbage files
realclean		removes target files too (causes a total rebuild)
dist
makegens		builds generics.h from scratch without pre-processing
newgens			builds generics.h from scratch while pre-processing


