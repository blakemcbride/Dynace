

/*  generics.h includes all class and generic declarations used by the
    system as well all the declarations used by the Dynace kernel and
    Windows.  */

#include "generics.h"

/*  resource.h is defined locally and has all the application specific
    definitions needed by the application, including menus, dialogs,
    cursors, icons, etc.  It is automatically created by your resource
    editor (like App Studio).  See the resource editor instructions which
    come with your compiler.  */

#include "resource.h"


/*  start() is the first application defined function called (instead of
    main() in normal C programs).  It should be declared as shown.  */

int	start()
{
	/*  declare a variable which will hold an arbitrary Dynace object
	    (in this case it will be the main application window)  */

	object	win;

	/*  declare a local buffer to hold the app title  */

	char	title[80];

	/*  create the app title including info on whether it's running
            in 16 or 32 bit mode  */

	sprintf(title, "My Test Application - %d", 8*sizeof(int));

	/*  Create the main window object by sending the vNew message to
	    the MainWindow class with the title argument
	    (which will serve as the window's title).

	    All operations are performed through Dynace generic functions.
	    The first argument to any generic function will always be a class
	    object or an instance object which was returned from another
	    generic call.  Generic functions always start with a lower case
	    letter followed with an upper case letter.  The first letter will
	    either be 'g', 'v', or 'm'.  The ones which start with 'g' (which
	    stands for Generic) are the most common.  These are generic
	    function with full compile-time argument checking enabled.  
	    Functions which start with 'v' (which stands for Variable
	    argument) allow variable number of arguments and therefore cannot
	    be checked at compile-time.  Although, when possible, arguments
	    are validated at runtime.  Generics beginning with 'm' (which
	    stands for Macro) are actually macros which translate into normal
	    ('g') generics with the same name.  They are used to avoid the
	    clutter of common typecasts.  

	    The object returned by this vNew operation represents the new
	    window created.  This window is an instance of the MainWindow
	    class.  From this point forward all operations which are to
	    effect the new window should be performed on the win object.  */

	win = vNew(MainWindow, title);

	/*  This next line associates the ICON
	    (ALGOCORP.ICO) with window win.  This icon was defined and
	    named with the resource editor which comes with your compiler.
	    This line is unnecessary and only serves to cause the Algorithms
	    Corporation icon to appear whenever the window is iconized.
	    If this line is commented out and the window is iconized Windows
	    will display a default icon.  */

	mLoadIcon(win, ALGOCORP_ICON);

	/*  This next call prints "Hello, World!\n" on the new window
	    created (win).  Notice the printf() like arguments and the
	    fact that win is the first argument.  */

	vPrintf(win, "Hello, World!\n");

	/*  This call actually displays the window and process all Windows
	    messages.  When the application is exited, the Window is
	    automatically destroyed and the application terminated.
	    The value returned by gProcessMessages()
	    will be the return code of the application.  */

	return gProcessMessages(win);
}
